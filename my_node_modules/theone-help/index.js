'use strict';
/**
 * theone-help
 * theone.io 博客 特属专供 辅助模块
 *//**
 * Module dependencies.
 */

/**
 * Module dependencies.
 * 依赖
 */
var fs = require('fs');
var mkdirp = require('mkdirp');
var cloudinary = require('cloudinary');
var facePP = require('faceppsdk');

cloudinary.config({
  'cloud_name': 'theone', 
  'api_key': '839643111429453', 
  'api_secret': 'Ie8msgPAl3-Hqi3e1cKOOAd9aK8' 
});

facePP. api_key = '197054b064ac88d5ad303b4956ab7d58';
facePP.api_secret = 'SHcXkRreTSiFAy0rQ0s8qbr5d3ltTHsu';


//自动创建 缺少路径
exports.autoPath = function  (path, cb) {
    fs.readdir(path, function  (err) {
        if(err){
            mkdirp(path,function  (err) {
                if(err){
                    cb(err);
                }
                cb();
            });
        }else{
            cb();
        }
    });
};

/**
 * base64Save2image,对base64字符串形式对图片进行存储
 * @param {string}  rootPath    根目录位于服务器的地址
 * @param  string   imgFullPath 目录地址完整文件名
 * @param  string   base64      base64图片的字符串
 * @param  function cb          回调函数
 */
exports.base64Save2image = function (rootPath, phPath, base64, cb) {
    var imgFullPath = rootPath+'/'+phPath;
    var rbase64 = base64.replace(/^data:image\/jpeg;base64,/, '');
    fs.writeFile(imgFullPath, rbase64, 'base64', function  (err) {
       if(err){
        return cb(err);
       } 
       cb(null, phPath);
    });

};

/**
 * 上传到 Cloudinary
 */
exports.upload2Cloudinary = function (photoPath,cb) {
    // 文件是否存在
    fs.open(photoPath,'r',function(err) {
        if(err){
            return cb(err);
        }    
        cloudinary.uploader.upload(photoPath, function(result) { 
          if(!result || !result.url){
            return cb({err:'upload Clouldinary Failed!'});
          }
          cb(null, result);
        });
    });
};

/**
 * 删除 Cloudinary Image
 */
exports.deleteFormCloudinary = function (cloudinaryId, cb) {
  cloudinary.uploader.destroy(cloudinaryId, function(result) {
      cb(result);
  });
};


/**
 * face++ 检测图片
 */

exports.facePlusPlusDetect = function (url, cb) {
  facePP.detection.detect({
    url:url,
    mode:'oneface'
  },function (err, res) {
    if(err){
      return cb(err);
    }
    cb(null, res);
  });
};

/**
 * face++ Person create
 */
exports.facePersonCreate = function (personName, faceIds, cb) {
  facePP.person.create({
    'person_name':personName,
    'face_id':faceIds
  },function (err, res) {
    if(err){
      return cb(err);
    }
    cb(res);
  });
};


